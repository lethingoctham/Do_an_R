plot(vo_huong)
# Đồ thị
install.packages('igraph')
library(igraph)
# Vo Huong
help(graph)
vo_huong <- make_graph( ~ A-B-C-D-A, E-A:B:C:D, directed = FALSE)
plot(vo_huong)
install.packages('igraph')
library(igraph)
# Vô hướng
help(graph)
vo_huong <- make_graph( ~ A-B-C-D-A, E-A:B:C:D, directed = FALSE)
plot(vo_huong)
# Có hướng
help(make_directed_graph)
a = make_graph(c(1, 2, 2, 3, 3, 4, 5, 6, 4,1, 2,4, 4,5, 6,1), directed = TRUE)
plot(a)
install.packages("igraph")
install.packages('igraph')
library(igraph)
# Vô hướng
help(graph)
vo_huong <- make_graph( ~ A-B-C-D-A, E-A:B:C:D, directed = FALSE)
plot(vo_huong)
install.packages('igraph')
library(igraph)
# Vô hướng
help(graph)
vo_huong <- make_graph( ~ A-B-C-D-A, E-A:B::D, directed = FALSE)
plot(vo_huong)
# Có hướng
help(make_directed_graph)
a = make_graph(c(1, 2, 2, 3, 3, 4, 5, 6, 4,1, 2,4, 4,5, 6,1), directed = TRUE)
plot(a)
install.packages("igraph")
install.packages('igraph')
library(igraph)
# Vô hướng
help(graph)
vo_huong <- make_graph( ~ A-B-C-D-A, E-A:B:C:D, directed = FALSE)
plot(vo_huong)
# Có hướng
help(make_directed_graph)
a = make_graph(c(1, 2, 2, 3, 3, 4, 5, 6, 4,1, 2,4, 4,5, 6,1), directed = TRUE)
plot(a)
install.packages('igraph')
library(igraph)
# Vô hướng
help(graph)
vo_huong <- make_graph( ~ A-B-C-D-A, E-A:B:D, directed = FALSE)
plot(vo_huong)
# Có hướng
help(make_directed_graph)
a = make_graph(c(1, 2, 2, 3, 3, 4, 5, 6, 4,1, 2,4, 4,5, 6,1), directed = TRUE)
plot(a)
install.packages("igraph")
selection_sort <- function(x)
{
n <- length(x)
for (i in 1 : (n - 1))
{
min_index <- i
for (j in (i + 1) : (n))
{
if (x[j] < x[min_index]) {
min_index = j
}
}
temp <- x[i]
x[i] <- x[min_index]
x[min_index] <- temp
}
x
}
arr <- sample(1 : 100, 10)
sorted_arr <- selection_sort(arr)
sorted_arr
selection_sort <- function(x)
{
n <- length(x)
for (i in 1 : (n - 1))
{
min_index <- i
for (j in (i + 1) : (n))
{
if (x[j] < x[min_index]) {
min_index = j
}
}
temp <- x[i]
x[i] <- x[min_index]
x[min_index] <- temp
}
x
}
arr <- sample(1 : 100, 10)
sorted_arr <- selection_sort(arr)
sorted_arr
#sap xep noi bot
bubble <- function(x){
n<-length(x)
for(j in 1:(n-1)){
for(i in 1:(n-j)){
if(x[i]>x[i+1]){
temp<-x[i]
x[i]<-x[i+1]
x[i+1]<-temp
}
}
}
return(x)
}
x <- c(5, 2, 4, 6, 1, 3)
bubble(x)
#sap xep noi bot
bubble <- function(x){
n<-length(x)
for(j in 1:(n-1)){
for(i in 1:(n-j)){
if(x[i]>x[i+1]){
temp<-x[i]
x[i]<-x[i+1]
x[i+1]<-temp
}
}
}
return(x)
}
x <- c(9, 4, 7, 2, 1, 3)
bubble(x)
quickSort <- function(arr) {
mid <- sample(arr, 1)
left <- c()
right <- c()
lapply(arr[arr != mid], function(d) {
if (d < mid) {
left <<- c(left, d)
}
else {
right <<- c(right, d)
}
})
if (length(left) > 1) {
left <- quickSort(left)
}
if (length(right) > 1) {
right <- quickSort(right)
quickSort <- function(arr) {
mid <- sample(arr, 1)
left <- c()
right <- c()
lapply(arr[arr != mid], function(d) {
if (d < mid) {
left <<- c(left, d)
}
else {
right <<- c(right, d)
}
})
if (length(left) > 1) {
left <- quickSort(left)
}
if (length(right) > 1) {
right <- quickSort(right)
}
c(left, mid, right)
}
quickSort(vec)
heapify <- function(arr,n,i)
{
largest <- i   #Khoi tao lon nhat
t <- 2*(i - 1) + 1   #Ben phai = 2*i + 1
p <- 2*(i - 1) + 2   #Ben trai = 2*i + 2
if((t<n) & (arr[largest]<arr[t]))
{
largest = t
}
if((p<n)&&(arr[largest]<arr[p]))
{
largest = p
}
if(largest != i)
{
arr <- replace(arr, c(i, largest), arr[c(largest, i)])
arr <- heapify(arr, n, largest)
}
arr
}
heap_sort <- function(arr)
{
n = length(arr)
#Xay dung muc toi da
for (i in (n/2):1)
{
arr <- heapify(arr, n, i)
}
# Trich xuat tung phan tu mot
for (i in n:1) {
arr <- replace(arr, c(i, 1), arr[c(1, i)]) #Hoan doi
arr <- heapify(arr, i, 1)
}
arr
}
arr <- sample(1:100)
heap_sort(arr)
heapify <- function(arr,n,i)
{
largest <- i   #Khoi tao lon nhat
t <- 2*(i - 1) + 1   #Ben phai = 2*i + 1
p <- 2*(i - 1) + 2   #Ben trai = 2*i + 2
if((t<n) & (arr[largest]<arr[t]))
{
largest = t
}
if((p<n)&&(arr[largest]<arr[p]))
{
largest = p
}
if(largest != i)
{
arr <- replace(arr, c(i, largest), arr[c(largest, i)])
arr <- heapify(arr, n, largest)
}
arr
}
heap_sort <- function(arr)
{
n = length(arr)
#Xay dung muc toi da
for (i in (n/2):1)
{
arr <- heapify(arr, n, i)
}
# Trich xuat tung phan tu mot
for (i in n:1) {
arr <- replace(arr, c(i, 1), arr[c(1, i)]) #Hoan doi
arr <- heapify(arr, i, 1)
}
arr
}
arr <- sample(1:100,10)
heap_sort(arr)
heapify <- function(arr,n,i)
{
largest <- i   #Khoi tao lon nhat
t <- 2*(i - 1) + 1   #Ben phai = 2*i + 1
p <- 2*(i - 1) + 2   #Ben trai = 2*i + 2
if((t<n) & (arr[largest]<arr[t]))
{
largest = t
}
if((p<n)&&(arr[largest]<arr[p]))
{
largest = p
}
if(largest != i)
{
arr <- replace(arr, c(i, largest), arr[c(largest, i)])
arr <- heapify(arr, n, largest)
}
arr
}
heap_sort <- function(arr)
{
n = length(arr)
#Xay dung muc toi da
for (i in (n/2):1)
{
arr <- heapify(arr, n, i)
}
# Trich xuat tung phan tu mot
for (i in n:1) {
arr <- replace(arr, c(i, 1), arr[c(1, i)]) #Hoan doi
arr <- heapify(arr, i, 1)
}
arr
}
arr <- sample(1:100,10)
arr
heapify <- function(arr,n,i)
{
largest <- i   #Khoi tao lon nhat
t <- 2*(i - 1) + 1   #Ben phai = 2*i + 1
p <- 2*(i - 1) + 2   #Ben trai = 2*i + 2
if((t<n) & (arr[largest]<arr[t]))
{
largest = t
heapify <- function(arr,n,i)
{
largest <- i   #Khoi tao lon nhat
t <- 2*(i - 1) + 1   #Ben phai = 2*i + 1
p <- 2*(i - 1) + 2   #Ben trai = 2*i + 2
if((t<n) & (arr[largest]<arr[t]))
{
largest = t
}
if((p<n)&&(arr[largest]<arr[p]))
{
largest = p
}
if(largest != i)
{
arr <- replace(arr, c(i, largest), arr[c(largest, i)])
arr <- heapify(arr, n, largest)
}
arr
}
heap_sort <- function(arr)
{
n = length(arr)
#Xay dung muc toi da
for (i in (n/2):1)
{
arr <- heapify(arr, n, i)
}
# Trich xuat tung phan tu mot
for (i in n:1) {
arr <- replace(arr, c(i, 1), arr[c(1, i)]) #Hoan doi
arr <- heapify(arr, i, 1)
}
arr
}
arr <- sample(1:100)
heap_sort(arr)
# Quick Sort
quick_sort<-function(x)
{
if(length(x)<=1) return(x)
i<-x[1]
j<-x[-1]
i_less<-quick_sort(j[j<i])
i_greater<-quick_sort(j[j>=i])
return(c(i_less,i,i_greater))
}
quick_sort(c(5,4,12,13,45, 3,8,85))
merge <- function(a, b) {
# Tạo mảng tạm thời
temp <- numeric(length(a) + length(b))
# lấy hai biến ban đầu trỏ đến
# bắt đầu của các mảng con đã sắp xếp
# và j trỏ đến bắt đầu bắt đầu
# của mảng tạm thời
astart <- 1
bstart <- 1
j <- 1
for(j in 1 : length(temp)) {
# nếu a[astart] < b[bstart]
if((astart <= length(a) &&
a[astart] < b[bstart]) ||
bstart > length(b)) {
# chèn a[start] tạm thời
# và tăng tới tiếp theo
temp[j] <- a[astart]
astart <- astart + 1
}
else {
temp[j] <- b[bstart]
bstart <- bstart + 1
}
}
temp
}
# Hàm để sắp xếp
mergeSort <- function(arr) {
# nếu độ dài của mảng lớn hơn 1 thì thực hiện sắp xếp
if(length(arr) > 1) {
# tìm điểm giữa mà mảng cần được chia
mid <- ceiling(length(arr)/2)
# phần đầu tiên của mảng sẽ từ 1 đến giữa
a <- mergeSort(arr[1:mid])
# phần thứ hai của mảng sẽ từ (mid + 1) đến chiều dài (arr)
b <- mergeSort(arr[(mid+1):length(arr)])
# hợp nhất các mảng đã sắp xếp ở trên
merge(a, b)
}
# khác chỉ trả về arr với một phần tử duy nhất
else {
arr
}
}
# lấy danh sách ban đầu đầu vào
arr <- sample(1:100, 10)
# Gọi hàm mergeSort
result <- mergeSort(arr)
# In ra kết quả
result
heapify <- function(arr,n,i)
{
largest <- i   #Khoi tao lon nhat
t <- 2*(i - 1) + 1   #Ben phai = 2*i + 1
p <- 2*(i - 1) + 2   #Ben trai = 2*i + 2
if((t<n) & (arr[largest]<arr[t]))
{
largest = t
}
if((p<n)&&(arr[largest]<arr[p]))
{
largest = p
}
if(largest != i)
{
arr <- replace(arr, c(i, largest), arr[c(largest, i)])
arr <- heapify(arr, n, largest)
}
arr
}
heap_sort <- function(arr)
{
n = length(arr)
#Xay dung muc toi da
for (i in (n/2):1)
{
arr <- heapify(arr, n, i)
}
# Trich xuat tung phan tu mot
for (i in n:1) {
arr <- replace(arr, c(i, 1), arr[c(1, i)]) #Hoan doi
arr <- heapify(arr, i, 1)
}
arr
}
arr <- sample(1:100)
heap_sort(arr)
setwd("C:\\Users\\acer\\Downloads\\COVID-19-master\\COVID-19-master\\csse_covid_19_data\\csse_covid_19_daily_reports_us")
names(data)
str(data)
setwd("C:\\Users\\acer\\Downloads\\COVID-19-master\\COVID-19-master\\csse_covid_19_data\\csse_covid_19_daily_reports_us")
names(data)
str(data)
#install va update thu vien
update.packages("tools")
install.packages("ggplot2", lib="C:\\Users\\acer\\Downloads\\R\\win-library\\3.3")
update.packages("ggplot2")
update.packages("data.table")
library(data.table)
#tao dataframe
NY <- data[Country_Region=="New York"]
#tao dataframe
Arzn <- data[Province_State=="Arizona"]
Fld <- data[Province_State=="Florida"]
setwd("C:\\Users\\acer\\Downloads\\COVID-19-master\\COVID-19-master\\csse_covid_19_data\\csse_covid_19_daily_reports_us")
names(data)
str(data)
#install va update thu vien
update.packages("tools")
install.packages("ggplot2", lib="C:\\Users\\acer\\Downloads\\R\\win-library\\3.3")
update.packages("ggplot2")
update.packages("data.table")
library(data.table)
#Doc tat ca cac file vao mot dataframe
files <- list.files(pattern = ".csv")
temp <- lapply(files, fread, sep=",")
temp
data <- rbindlist( temp, fill=TRUE)
names(data)
#Tao cac list va dataframe ve so luong nguoi nhiem covid, nguoi chet
#do covid, nguoi da hoi phuc, ti le tu vong
#
#tao dataframe
Clfn <- data[Country_Region=="California"]
Fld <- data[Country_Region=="Florida"]
Clfn$Case_Fatality_Ratio <- format(round(Clfn$Case_Fatality_Ratio, 2), nsmall = 2)
#doc file du lieu ve covid cua cac bang/thanh pho
#tai My ngay 05/04/2021 va ngay 01/01/2021
#dung thu vien ggplot2 de ve do thi
library("ggplot2", lib.loc="~/R/win-library/4.0")
#doc file du lieu ve covid cua cac bang/thanh pho
#tai My ngay 05/04/2021 va ngay 01/01/2021
#dung thu vien ggplot2 de ve do thi
library("ggplot2", lib.loc="~/R/win-library/4.0.5")
#do thi 1: Bieu do cot
# bieu hien so luong ca nhiễm covid 19 duoc xac nhan ở các bang/thanh pho tai My
ggplot(df, aes(x=Confirmed, y=Province_State))  +
geom_col(aes(color=Confirmed,fill =Province_State)) +
labs(title="Đồ thị thể hiện số lượng ca nhiễm covid 19 được xác nhận ở các bang/thành phố tại Mỹ
từ 12/2020 đến 07/2021")
#doc file du lieu ve covid cua cac bang/thanh pho
#tai My ngay 01/02/2021
df1 <- read.table("01-02-2021.csv",
header = TRUE,
sep = ",")
names(df1)
#Chuyen sang so thap phan co 2 chu so sau dau phay
df1$Case_Fatality_Ratio <- format(round(df1$Case_Fatality_Ratio, 2), nsmall = 2)
df1$Case_Fatality_Ratio
#doc file du lieu ve covid cua cac bang/thanh pho
#tai My ngay 04/06/2021
df <- read.table("04-06-2021.csv",
header = TRUE,
sep = ",")
names(df)
View(df)
df$Mortality_Rate <- format(round(df$Mortality_Rate, 2), nsmall = 2)
#doc file du lieu ve covid cua cac bang/thanh pho
#tai My ngay 05/04/2021 va ngay 01/01/2021
#dung thu vien ggplot2 de ve do thi
library("ggplot2", lib.loc="~/R/win-library/4.0.5")
#do thi 1: Bieu do cot
# bieu hien so luong ca nhiễm covid 19 duoc xac nhan ở các bang/thanh pho tai My
ggplot(df, aes(x=Confirmed, y=Province_State))  +
geom_col(aes(color=Confirmed,fill =Province_State)) +
labs(title="Đồ thị thể hiện số lượng ca nhiễm covid 19 được xác nhận ở các bang/thành phố tại Mỹ
từ 12/2020 đến 07/2021")
#Do thi the hien so luong nguoi chet boi covid theo tung ngay o bang California
#layers trong ggplot2 goi la 'geoms'
#su dung goem_point
#do thi 2: Bieu do diem
ggplot(Clfn, aes(x=Deaths, y=Last_Update)) +
geom_point(aes(colour = Deaths), colour = "red") +
labs(title="Đồ thị thể hiện số lượng ca tử vong bởi covid 19 được xác nhận ở California tại Mỹ
từ 12/2020 đến 07/2021")
